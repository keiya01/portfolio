{"version":3,"sources":["modules/works/index.js","constants/api.js","modules/store.js","containers/ScrollToTop.js","components/ScrollToTop.js","components/common/LoadingScreen.js","components/AppRoute.js","containers/AppRoute.js","serviceWorker.js","index.js","components/App.js"],"names":["prefix","GET_WORKS_START","GET_WORKS_SUCCESS","GET_WORKS_FAILED","GET_WORKS_END","initialState","data","isFetching","reducer","state","arguments","length","undefined","action","type","Object","objectSpread","error","getWorks","dispatch","getState","axios","get","then","json","getWorksSuccess","catch","err","finally","createStore","reduxCreateStore","combineReducers","works","applyMiddleware","thunk","logger","component","props","children","stateHandler","handleChange","ownProps","name","value","defineProperty","lifeCycle","componentDidUpdate","prevProps","this","location","window","scrollTo","Enhance","compose","setDisplayName","withStateHandlers","withHandlers","withRouter","lifecycle","pure","LoadingScreen","react_default","a","createElement","className","css","styles","loading","index_es","icon","spinner","pulse","StyleSheet","create","position","top","bottom","left","right","display","flexDirection","justifyContent","alignItems","zIndex","fontSize","color","textAlign","HomeTopScreen","lazy","__webpack_require__","e","bind","BlogTopScreen","WorkTopScreen","BrowserRouter","basename","containers_ScrollToTop","Switch","react","fallback","Route","path","exact","redirectHashUri","uri","href","includes","slice","list","connect","Works","componentWillMount","_this$props","onlyUpdateForKeys","Boolean","hostname","match","library","add","fab","faCheck","faGrinSquint","faFrown","faCircle","faSpinner","faHandPointDown","faLaptopCode","faExternalLinkAlt","ReactDOM","render","react_redux_es","store","containers_AppRoute","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c02ccb0c.chunk.js","sourcesContent":["import axios from 'axios'\nimport * as API from '../../constants/api'\n\nconst prefix = 'portfolio/works/'\n\nconst GET_WORKS_START = prefix + 'GET_WORKS_START'\nconst GET_WORKS_SUCCESS = prefix + 'GET_WORKS_SUCCESS'\nconst GET_WORKS_FAILED = prefix + 'GET_WORKS_FAILED'\nconst GET_WORKS_END = prefix + 'GET_WORKS_END'\n\nconst initialState = {\n    data: [],\n    isFetching: false\n}\n\nexport default function reducer(state = initialState, action) {\n    switch (action.type) {\n        case GET_WORKS_START:\n            return {\n                ...state,\n                isFetching: true\n            }\n        case GET_WORKS_SUCCESS:\n            const {\n                data\n            } = action\n            return {\n                ...state,\n                data,\n                isFetching: true\n            }\n        case GET_WORKS_FAILED:\n            return {\n                ...state,\n                error: action.error\n            }\n        case GET_WORKS_END:\n            return {\n                ...state,\n                isFetching: false\n            }\n        default:\n            return {\n                ...state\n            }\n    }\n}\n\nconst getWorksStart = () => ({\n    type: GET_WORKS_START\n})\nconst getWorksSuccess = (json) => ({\n    type: GET_WORKS_SUCCESS,\n    data: json\n})\nconst getWorksFaild = (error) => ({\n    type: GET_WORKS_FAILED,\n    error\n})\nconst getWorksEnd = () => ({\n    type: GET_WORKS_END\n})\n\nexport const getWorks = () => (dispatch, getState) => {\n    const uri = API.WORKS\n    dispatch(getWorksStart())\n    axios.get(uri)\n        .then((json) => {\n            dispatch(getWorksSuccess(json.data))\n        })\n        .catch((err) => {\n            dispatch(getWorksFaild(err))\n        }).finally(() => {\n            dispatch(getWorksEnd())\n        })\n}","export const WORKS = \"https://script.google.com/macros/s/AKfycbx1zqRJTh_4qbfopWyGS-4rqibT5OUKc5V_pwz_m_9Xbqus3FZy/exec\"","import { createStore as reduxCreateStore, applyMiddleware, combineReducers } from 'redux'\nimport logger from 'redux-logger'\nimport thunk from 'redux-thunk'\n\nimport works from './works'\n\nfunction createStore() {\n  const store = reduxCreateStore(\n    combineReducers({\n      works\n    }),\n    applyMiddleware(\n      thunk,\n      logger,\n    )\n  );\n  \n  return store;\n}\n\nexport default createStore()","import { compose, withStateHandlers, setDisplayName, lifecycle, pure, withHandlers } from 'recompose'\nimport { withRouter } from 'react-router'\nimport ScrollToTop from '../components/ScrollToTop'\n\n\nconst display = \"ScrollToTop\"\nconst component = ScrollToTop\n\nconst initialProps = {\n}\n\n// propsの値を変更する\nconst handleChange = (ownProps) => {\n    return (name, value) => {\n        return {\n            [name]: value\n        }\n    }\n}\n\n// propsの変更を行うhandler\nconst stateHandler = {\n    handleChange,\n}\n\n// propsの変更を行わないhandler\nconst handleProps = (ownProps) => ({\n})\n\n// componentDidMountなどのライフサイクルを記述する\nconst lifeCycle = {\n    componentDidUpdate(prevProps) {\n        if (this.props.location !== prevProps.location) {\n            window.scrollTo(0, 0)\n        }\n    }\n}\n\nconst Enhance = compose(\n    setDisplayName(display),\n    withStateHandlers(\n        initialProps,\n        stateHandler\n    ),\n    withHandlers(handleProps),\n    withRouter,\n    lifecycle(lifeCycle),\n    pure\n)\n\nexport default Enhance(withRouter(component))","export default function ScrollToTop(props) {\n    return props.children\n}","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { StyleSheet, css } from 'aphrodite'\n\nexport default function LoadingScreen(props) {\n    return (\n        <div className={css(styles.loading)}>\n             <FontAwesomeIcon\n                 icon='spinner'\n                 className={css(styles.spinner)}\n                 pulse\n             />\n        </div> \n    )\n}\n\nconst styles = StyleSheet.create({\n    loading: {\n        position: 'fixed',\n        top: 0,\n        bottom: 0,\n        left: 0,\n        right: 0,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        zIndex: 100,\n    },\n    spinner: {\n        fontSize: 40,\n        color: '#e83e53',\n        display: 'flex',\n        textAlign: 'center'\n    },\n})","import React, { lazy, Suspense } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport ScrollToTop from '../containers/ScrollToTop'\nimport LoadingScreen from '../components/common/LoadingScreen';\nconst HomeTopScreen = lazy(() => import('../containers/home/HomeTopScreen'))\nconst BlogTopScreen = lazy(() => import('../containers/blogs/BlogTopScreen'))\nconst WorkTopScreen = lazy(() => import('../containers/works/WorkTopScreen'))\n\nexport default function AppRoute() {\n    return (\n        <Router basename='/portfolio/#'>\n            <ScrollToTop>\n                <Switch>\n                    <Suspense fallback={<LoadingScreen/>}>\n                        <Route path={`/works`} component={WorkTopScreen} />\n                        <Route path={`/blogs`} component={BlogTopScreen} />\n                        <Route exact path={`/`} component={HomeTopScreen} />\n                    </Suspense>\n                </Switch>\n            </ScrollToTop>\n        </Router>\n    )\n}","import { compose, withStateHandlers, setDisplayName, lifecycle, onlyUpdateForKeys, withHandlers } from 'recompose'\nimport { connect } from 'react-redux'\nimport * as Works from '../modules/works'\n\nimport AppRoute from '../components/AppRoute'\n\n\nconst display = \"AppRoute\"\nconst component = AppRoute\n\nconst initialProps = {\n    list: []\n}\n\nconst canRenderProps = []\n\n// propsの値を変更する\nconst handleChange = (ownProps) => {\n    return (name, value) => {\n        return {\n            [name]: value\n        }\n    }\n}\n\n// propsの変更を行うhandler\nconst stateHandler = {\n    handleChange,\n}\n\nconst redirectHashUri = (ownProps) => () => {\n    const { location } = window\n    let uri = location.href\n\n    const hasHash = uri.includes('/#/')\n    if (!hasHash) {\n        // http://example.com/ 最後に「 / 」が入っていないなら付ける\n        if (uri.slice(-1) !== '/') {\n            // 最後の文字以外を取得\n            uri += '/'\n        }\n        // 指定のuriに遷移\n        window.location = uri + '#/'\n    }\n}\n\n// propsの変更を行わないhandler\nconst handleProps = (ownProps) => ({\n    redirectHashUri,\n})\n\nconst mapStateToProps = (state) => {\n    const {\n        data\n    } = state.works\n    return {\n        list: data\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n    getWorks: () => dispatch(Works.getWorks())\n})\n\n// componentDidMountなどのライフサイクルを記述する\nconst lifeCycle = {\n    componentWillMount() {\n        const {\n            list,\n            getWorks,\n            redirectHashUri\n        } = this.props\n        if (list.length === 0) {\n            getWorks()\n        }\n        redirectHashUri()\n    },\n}\n\nconst Enhance = compose(\n    setDisplayName(display),\n    withStateHandlers(\n        initialProps,\n        stateHandler\n    ),\n    withHandlers(handleProps),\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    ),\n    lifecycle(lifeCycle),\n    onlyUpdateForKeys(canRenderProps),\n)\n\nexport default Enhance(component)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport {\n    faCheck,\n    faGrinSquint,\n    faFrown,\n    faCircle,\n    faSpinner,\n    faHandPointDown,\n    faLaptopCode,\n    faExternalLinkAlt\n} from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(\n    fab,\n    faCheck,\n    faGrinSquint,\n    faFrown,\n    faCircle,\n    faSpinner,\n    faHandPointDown,\n    faLaptopCode,\n    faExternalLinkAlt\n)\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React from 'react'\nimport store from '../modules/store'\nimport { Provider } from 'react-redux'\nimport AppRoute from '../containers/AppRoute';\n\nexport default function App() {\n  return (\n    <Provider store={store}>\n      <AppRoute />\n    </Provider>\n  )\n}\n"],"sourceRoot":""}